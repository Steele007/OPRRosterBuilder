@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Diagnostics
@using OPRRosterBuilder.Models
@using OPRRosterBuilder.Services
@using OPRRosterBuilder.Commands
@using Newtonsoft.Json
@using System.Text.Json
@using System.Text
@using System.IO
@inject JsonFileReaderService jsonService
@inject IJSRuntime JSRuntime





@if (Units == null)
{
    <p>Army doesn't exist</p>
}
else
{
    <div class="container" style="">

        <div class="row" style="margin-bottom:20px">
            <div class="col" style="text-align:left">
                <h3>@ListName <i class="bi bi-pencil-fill" style="margin-left:5px; margin-bottom:5px" data-toggle="modal" data-target="#changeListNameModal"></i></h3>
                <div class="modal" id="changeListNameModal" data-backdrop="static" data-keyboard="false" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">            
                            <div class="modal-body">
                                <p>Edit Army List name:</p>
                                <input type="text" id="armyListNameTextInput" class="form-control" value=@ListName/>
                            </div>
                            <div class="modal-footer">
                                <button type="button" id="changeListNameModalClose" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" @onclick='(e=>changeListName())'>Submit</button>
                            </div>
                        </div>
                        
                    </div>
                </div>
            </div>
            <div class="col" style="text-align:right">
                <h4>@(Points + "pts.")</h4>
            </div>
            <div class="col" style="text-align:right">
                
                <div class="dropdown">
                    <button class="btn btn-secondary" id="dropdownMenuButton" type="button" data-toggle="dropdown" aria-expanded="false">                     
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <InputFile id="loadArmyListInput" style="display: none;" accept=".oprrost" OnChange="loadArmy" />
                    <ul class="dropdown-menu">
                        <li class="dropdown-item" @onclick='(e => downloadArmyListContent(ListName + ".oprrost"))'>Save roster file</li>
                        <li class="dropdown-item" @onclick='(e => downloadArmyListContent(ListName + ".txt"))'>Save as text</li>
                        <li class="dropdown-item" @onclick='(e => clickElement("loadArmyListInput"))'>Open Army List</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="row" style="">
            <div class="col-sm" id="unitList" style="overflow-y:auto; height:90vh">

                @foreach (Unit unit in Units)
                {
                    <div class="card">
                        <div class="card-body" @onclick="(e => addUnit(unit))">
                            <div class="row">
                                <div class="col"><h5 class="card-title">@(unit.UnitName + " - " + unit.Points + "pts.")</h5></div>
                                <div class="col-2" style="text-align:right"><i class="bi bi-plus-circle"></i></div>
                            </div>                            
                            @foreach (var item in unit.CurrentGear)
                            {
                                <p class="card-text">@(item.Value.Item2 + "X " + item.Key + " " + item.Value.Item1)</p>
                            }
                        </div>
                    </div>
                }

            </div>
            <div class="col" id="armyRoster" style="overflow-y:auto; height:90vh">
                @foreach (Unit unit in this.ArmyRoster)
                {
                    <div class="card">                        
                        <div class="card-body" @onclick="(e => selectModifiers(unit))">
                            <div class="row">
                                <div class="dropdown" style="margin-left:94%; margin-bottom:-6%">
                                    <i class="bi bi-three-dots-vertical" id="dropdownMenuButton" data-toggle="dropdown" aria-expanded="false"></i>
                                    <ul class="dropdown-menu">
                                        <li class="dropdown-item" @onclick='(e => removeUnit(unit))'>Remove</li>                                       
                                    </ul>
                                </div>
                            </div>
                            <h5 class="card-title">@(unit.UnitName + " - " + unit.Points + "pts.")</h5>
                            @foreach (var item in unit.CurrentGear)
                            {
                                <p class="card-text">@(item.Value.Item2 + "X " + item.Key + " " + item.Value.Item1)</p>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="col" id="options" style="overflow-y:auto; height:90vh">                
                @{
                    int i = 0;
                }
                @foreach (Modifier mod in Mods)
                {
                    @if (mod.ModType == ModTypes.Replace)
                    {
                        <div>         
                            <h5>@("Replace one " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Replace_All)
                    {
                        <div>
                            <h5>@("Replace every " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceAllCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceAllCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Replace_Any)
                    {
                        <div>
                            <h5>@("Replace any " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @( option.OptionPoints + " pts. ")
                                        @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                        {
                                            <i id=@("Subtract" + i) @onclick="(e => removeOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">- </i> @getGearNum(gearItem.Item1) <i id=@("Add" + i) @onclick="(e => addOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">+ </i>
                                            @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                        }
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Replace_Up_To)
                    {
                        <div>
                            <h5>@("Replace up to " + mod.TargetNum + " " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @( option.OptionPoints + " pts. ")
                                        @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                        {
                                            <i id=@("Subtract" + i) @onclick="(e => removeOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">- </i> @getGearNum(gearItem.Item1) <i id=@("Add" + i) @onclick="(e => addOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">+ </i>
                                            @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                        }
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade)
                    {
                        <div>
                            <h5>@("Take one " + formattedGearList(mod.Target) + " upgrade")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_All)
                    {
                        <div>
                            <h5>@("Upgrade all models with")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_All_Any)
                    {
                        <div>
                            <h5>@("Upgrade all models with any")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_Any)
                    {
                        <div>
                            <h5>@("Upgrade " + formattedGearList(mod.Target) + " with any")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_One_With)
                    {
                        <div>
                            <h5>@("Upgrade one model with " + (mod.TargetNum == 1 ? "one":"any"))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_Any_With)
                    {
                        <div>
                            <h5>@("Upgrade any " + formattedGearList(mod.Target) + " with")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @( option.OptionPoints + " pts. ")
                                        @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                        {
                                            <i id=@("Subtract" + i) @onclick="(e => removeOption(e, new UpgradeAnyWithCommand(CurrentUnit, mod, option),idName))">- </i> @getGearNum(gearItem.Item1) <i id=@("Add" + i) @onclick="(e => addOption(e, new UpgradeAnyWithCommand(CurrentUnit, mod, option),idName))">+ </i>
                                            @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                        }
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                }
            </div>
        </div>

    </div>
}



@code {

    [Parameter]
    public string ArmyName { get; set; }

    public IEnumerable<Unit> Units { get; private set; }
    public IEnumerable<Modifier> Mods { get; private set; }
    public Unit CurrentUnit { get; private set; }
    public List<Unit> ArmyRoster { get; set; }
    public int Points { get; set; }
    public string ListName { get; set; }

    protected override void OnInitialized()
    {
        Units = jsonService.GetUnits(ArmyName);
        ArmyRoster = new List<Unit>();
        Mods = new List<Modifier>();
        ListName = ArmyName + " List";
    }

    private void addUnit(Unit unit)
    {
        //Uses deserialization to make a deep copy of the unit.
        Unit newUnit = JsonConvert.DeserializeObject<Unit>(unit.ToString());
        ArmyRoster.Add(newUnit);
        changeState();

    }

    private void removeUnit(Unit unit)
    {
        ArmyRoster.Remove(unit);
        Mods = new List<Modifier>();
        changeState();

    }

    private void selectModifiers(Unit unit)
    {
        //System.Diagnostics.Debugger.Break();
        CurrentUnit = unit;
        Mods = CurrentUnit.Modifiers;
        StateHasChanged();
    }

    private string formattedGearList(List<(string, string, int)> targetGear)
    {

        if (targetGear.Count == 1)
        {
            if (targetGear[0].Item1.Equals("self"))
            {
                return "";
            }
            else
            {
                return targetGear[0].Item1;
            }


        }
        else if (targetGear.Count >= 1)
        {
            string combinedString = "";

            for (int i = 0; i < targetGear.Count - 1; i++)
            {
                combinedString += targetGear[i].Item1 + " ";
            }

            combinedString += "and " + targetGear[targetGear.Count - 1].Item1;

            return combinedString;
        }
        else
        {
            return "";
        }

    }

    //Called whenever a user picks an upgrade for unit in their list
    private async void optionChecked(EventArgs e, IModifyCommand command, string Id)
    {
        bool isChecked = await JSRuntime.InvokeAsync<bool>("isChecked", Id);
        if (isChecked)
        {
            if (!command.execute())
            {
                await JSRuntime.InvokeVoidAsync("changeCheck", Id, false);

            }

        }
        else
        {
            if (!command.undo())
            {
                await JSRuntime.InvokeVoidAsync("changeCheck", Id, true);
            }
        }
        changeState();
    }

    private void removeOption(EventArgs e, IModifyCommand command, string Id)
    {
        if (command.undo())
        {
            changeState();
        }

    }

    private void addOption(EventArgs e, IModifyCommand command, string Id)
    {
        if (command.execute())
        {
            changeState();
        }

    }

    private int getGearNum(string gearName)
    {
        (string, int, int) gearValue;
        if (CurrentUnit == null)
        {
            return 0;
        }
        else if (CurrentUnit.CurrentGear.TryGetValue(gearName, out gearValue))
        {
            return gearValue.Item2;
        }
        else
        {
            return 0;
        }
    }

    private async void changeListName()
    {
        string textInput = await JSRuntime.InvokeAsync<string>("getElementValue", "armyListNameTextInput");

        if(!textInput.Equals(""))
        {
            ListName = textInput;
            clickElement("changeListNameModalClose");
            StateHasChanged();
        }
    }

    private async void downloadArmyListContent(string fileName)
    {

        ArmyList downloadedList = new ArmyList(ArmyRoster, Points, ArmyName);
        string fileContent = downloadedList.ToString();

        if (fileName.EndsWith(".oprrost"))
        {

            byte[] downloadFileContent = Encoding.Unicode.GetBytes(fileContent);

            Debug.WriteLine(System.Text.Encoding.Unicode.GetString(downloadFileContent));

            Stream fileStream = new MemoryStream(downloadFileContent);
            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JSRuntime.InvokeVoidAsync("downloadRosterFile", fileName, streamRef);


        }else if (fileName.EndsWith(".txt"))
        {


            byte[] downloadFileContent = Encoding.Unicode.GetBytes(generateArmyListText());

            Debug.WriteLine(System.Text.Encoding.Unicode.GetString(downloadFileContent));

            Stream fileStream = new MemoryStream(downloadFileContent);
            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JSRuntime.InvokeVoidAsync("downloadRosterFile", fileName, streamRef);
        }

    }

    private string generateArmyListText()
    {
        StringBuilder textContent = new StringBuilder(ListName + " " + Points + " pts.\n\n");

        foreach (Unit unit in ArmyRoster)
        {
            textContent.AppendLine(unit.UnitName + "[" + unit.UnitSize + "]");
            textContent.AppendLine(unit.Quality + "+ " + unit.Defense + "+\n");

            foreach (string specialRule in unit.SpecialRules)
            {
                textContent.Append(specialRule + " ");
            }
            textContent.AppendLine("\n");
            foreach (var item in unit.CurrentGear)
            {
                textContent.AppendLine(item.Value.Item2 + "x " + item.Key + " " + item.Value.Item1);
            }

            textContent.AppendLine("\n\n");
        }

        if(ArmyRoster.Count > 0)
        {
            List<Rules> armyRules = jsonService.getArmyRules(ArmyName);
            Rules coreRules = jsonService.getArmyRules();

            textContent.AppendLine(coreRules.RulesName + ":\n");

            foreach (Rule rule in coreRules.RulesList)
            {
                textContent.AppendLine(rule.Name + ": " + rule.text + "\n");
            }

            textContent.AppendLine("\n");

            foreach(Rules rulesSection in armyRules)
            {
                textContent.AppendLine(rulesSection.RulesName + ":\n");

                foreach(Rule rule in rulesSection.RulesList)
                {
                    textContent.AppendLine(rule.Name + ": " + rule.text + "\n");                   
                }

                textContent.AppendLine("\n");
            }
        }

        return textContent.ToString();
    }

    private async void clickElement(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("clickElement", elementId);
    }

    private async void loadArmy(InputFileChangeEventArgs e)
    {

        //Copies bytes from Roster File into MemoryStream in order for the content to be decoded.
        IBrowserFile armyListFile = e.File;

        using MemoryStream memStream = new MemoryStream();
        using (Stream armyListStream = armyListFile.OpenReadStream()){

            await armyListStream.CopyToAsync(memStream);
            //new byte[armyListStream.Length];
            //armyListStream.Read(fileBytes, 0, armyListStream.Length);
        }
        byte[] fileBytes = memStream.ToArray();
        string fileContent = System.Text.Encoding.ASCII.GetString(fileBytes);

        ArmyList loadedArmy = JsonConvert.DeserializeObject<ArmyList>(fileContent);

        //Essentially reconstruct the entire page.
        Points = loadedArmy.Points;
        ListName = armyListFile.Name;
        Debug.WriteLine(ListName);
        ArmyName = loadedArmy.ArmyName;
        Units = jsonService.GetUnits(ArmyName);
        ArmyRoster = loadedArmy.Units;

        StateHasChanged();
    }

    //Called when the html is to be reloaded and the points be updated at the same time.
    private void changeState()
    {
        int pointTotal = 0;
        foreach(Unit unit in ArmyRoster)
        {
            pointTotal += unit.Points;
        }
        Points = pointTotal;
        StateHasChanged();
    }
}
