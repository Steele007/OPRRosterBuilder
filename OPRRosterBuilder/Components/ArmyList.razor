@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics
@using OPRRosterBuilder.Models
@using OPRRosterBuilder.Services
@using OPRRosterBuilder.Commands
@using Newtonsoft.Json
@using System.Text.Json;
@inject JsonFileReaderService jsonService
@inject IJSRuntime JSRuntime




@if (Units == null)
{
    <p>Army doesn't exist</p>
}
else
{
    <div class="container" style="">
        <div class="row" style="margin-bottom:20px">
            <div class="col" style="text-align:right">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                </svg>
            </div>            
        </div>
        <div class="row" style="">
            <div class="col-sm" id="unitList" style="overflow-y:auto; height:90vh">

                @foreach (Unit unit in Units)
                {
                    <div class="card">
                        <div class="card-body" @onclick="(e => addUnit(unit))">
                            <h5 class="card-title">@(unit.UnitName + " - " + unit.Points + "pts.")  &plus;</h5>
                            @foreach (var item in unit.CurrentGear)
                            {
                                <p class="card-text">@(item.Value.Item2 + "X " + item.Key + " " + item.Value.Item1)</p>
                            }
                        </div>
                    </div>
                }

            </div>
            <div class="col" id="armyRoster" style="overflow-y:auto; height:90vh">
                @foreach (Unit unit in this.ArmyRoster)
                {
                    <div class="card">
                        <div class="card-body" @onclick="(e => selectModifiers(unit))">
                            <h5 class="card-title">@(unit.UnitName + " - " + unit.Points + "pts.")  &plus;</h5>
                            @foreach (var item in unit.CurrentGear)
                            {
                                <p class="card-text">@(item.Value.Item2 + "X " + item.Key + " " + item.Value.Item1)</p>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="col" id="options" style="overflow-y:auto; height:90vh">
                @{
                    int i = 0;
                }
                @foreach (Modifier mod in Mods)
                {
                    @if (mod.ModType == ModTypes.Replace)
                    {
                        <div>
                            <h5>@("Replace one " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Replace_All)
                    {
                        <div>
                            <h5>@("Replace every " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceAllCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new ReplaceAllCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Replace_Any)
                    {
                        <div>
                            <h5>@("Replace any " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @( option.OptionPoints + " pts. ")
                                        @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                        {
                                            <i id=@("Subtract" + i) @onclick="(e => removeOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">- </i> @getGearNum(gearItem.Item1) <i id=@("Add" + i) @onclick="(e => addOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">+ </i>
                                            @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                        }
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Replace_Up_To)
                    {
                        <div>
                            <h5>@("Replace up to " + mod.TargetNum + " " + formattedGearList(mod.Target))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {

                                    string idName = "Button" + i;

                                    <li class="list-group-item">
                                        @( option.OptionPoints + " pts. ")
                                        @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                        {
                                            <i id=@("Subtract" + i) @onclick="(e => removeOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">- </i> @getGearNum(gearItem.Item1) <i id=@("Add" + i) @onclick="(e => addOption(e, new ReplaceCommand(CurrentUnit, mod, option),idName))">+ </i>
                                            @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                        }
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade)
                    {
                        <div>
                            <h5>@("Take one " + formattedGearList(mod.Target) + " upgrade")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_All)
                    {
                        <div>
                            <h5>@("Upgrade all models with")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_All_Any)
                    {
                        <div>
                            <h5>@("Upgrade all models with any")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_Any)
                    {
                        <div>
                            <h5>@("Upgrade " + formattedGearList(mod.Target) + " with any")</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_One_With)
                    {
                        <div>
                            <h5>@("Upgrade one model with " + (mod.TargetNum == 1 ? "one":"any"))</h5>
                            <ul class="list-group">
                                @foreach (ModifierOption option in mod.Options)
                                {
                                    string idName = "Button" + i;
                                    <li class="list-group-item">
                                        @if (option.OptionPicked)
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input me-1" type="checkbox" name="listGroupRadio" value="" id=@idName @onclick="(e => optionChecked(e, new UpgradeCommand(CurrentUnit, mod, option), idName))">
                                        }

                                        <label class="form-check-label" for=@idName>
                                            @( option.OptionPoints + " pts. ")
                                            @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                            {
                                                @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                            }
                                        </label>
                                    </li>
                                    i++;
                                }

                            </ul>
                        </div>
                    }
                    else if (mod.ModType == ModTypes.Upgrade_Any_With)
                    {
                    <div>
                        <h5>@("Upgrade any " + formattedGearList(mod.Target) + " with")</h5>
                        <ul class="list-group">
                            @foreach (ModifierOption option in mod.Options)
                            {

                                string idName = "Button" + i;

                                <li class="list-group-item">
                                    @( option.OptionPoints + " pts. ")
                                    @foreach ((string, string, int, int) gearItem in option.OptionGear)
                                    {
                                        <i id=@("Subtract" + i) @onclick="(e => removeOption(e, new UpgradeAnyWithCommand(CurrentUnit, mod, option),idName))">- </i> @getGearNum(gearItem.Item1) <i id=@("Add" + i) @onclick="(e => addOption(e, new UpgradeAnyWithCommand(CurrentUnit, mod, option),idName))">+ </i>
                                        @(gearItem.Item1 + " " + gearItem.Item2 + " ")
                                    }
                                </li>
                                i++;
                            }

                        </ul>
                    </div>
                    }
                }
            </div>
        </div>

    </div>
}



@code {

    [Parameter]
    public string ArmyName { get; set; }
    public IEnumerable<Unit> Units { get; private set; }
    public IEnumerable<Modifier> Mods { get; private set; }
    public Unit CurrentUnit { get; private set; }
    public List<Unit> ArmyRoster { get; set; }
    public int Points { get; set; }


    protected override void OnInitialized()
    {
        Units = jsonService.GetUnits(ArmyName);
        ArmyRoster = new List<Unit>();
        Mods = new List<Modifier>();
    }

    private void addUnit(Unit unit)
    {
        /*Unit newUnit = JsonSerializer.Deserialize<Unit>(unit.ToString(), new JsonSerializerOptions
        {
            IncludeFields = true,
        });*/
        Unit newUnit = JsonConvert.DeserializeObject<Unit>(unit.ToString());
        ArmyRoster.Add(newUnit);

    }

    private void selectModifiers(Unit unit)
    {
        //System.Diagnostics.Debugger.Break();
        CurrentUnit = unit;
        Mods = CurrentUnit.Modifiers;
        StateHasChanged();
    }

    private string formattedGearList(List<(string, string, int)> targetGear)
    {

        if (targetGear.Count == 1)
        {
            if (targetGear[0].Item1.Equals("self"))
            {
                return "";
            }
            else
            {
                return targetGear[0].Item1;
            }


        }
        else if (targetGear.Count >= 1)
        {
            string combinedString = "";

            for (int i = 0; i < targetGear.Count - 1; i++)
            {
                combinedString += targetGear[i].Item1 + " ";
            }

            combinedString += "and " + targetGear[targetGear.Count - 1].Item1;

            return combinedString;
        }
        else
        {
            return "";
        }

    }

    //Called whenever a user picks an upgrade for unit in their list
    private async void optionChecked(EventArgs e, IModifyCommand command, string Id)
    {
        bool isChecked = await JSRuntime.InvokeAsync<bool>("isChecked", Id);
        if (isChecked)
        {
            if (!command.execute())
            {
                await JSRuntime.InvokeVoidAsync("changeCheck", Id, false);

            }

        }
        else
        {
            if (!command.undo())
            {
                await JSRuntime.InvokeVoidAsync("changeCheck", Id, true);
            }
        }
        StateHasChanged();
    }

    private void removeOption(EventArgs e, IModifyCommand command, string Id)
    {
        if (command.undo())
        {
            StateHasChanged();
        }

    }

    private void addOption(EventArgs e, IModifyCommand command, string Id)
    {
        if (command.execute())
        {
            StateHasChanged();
        }

    }

    private int getGearNum(string gearName)
    {
        (string, int, int) gearValue;
        if(CurrentUnit == null)
        {
            return 0;
        }else if(CurrentUnit.CurrentGear.TryGetValue(gearName, out gearValue))
        {
            return gearValue.Item2;
        }
        else
        {
            return 0;
        }
    }
}
